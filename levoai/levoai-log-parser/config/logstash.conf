input {
  beats {
    port => "${LOGSTASH_BEATS_PORT}"
  }
}

filter {

  # Filter out metadata and configuration lines, keeping only CEF events
  if [message] !~ /^CEF:/ {
    drop {}
  }

  # Parse CEF fields and map them to eBPF trace format
  grok {
    match => {
      "message" => [
        # Match basic CEF fields
        "CEF:%{NUMBER:cef_version}\|%{DATA:device_vendor}\|%{DATA:device_product}\|%{DATA:device_version}\|%{DATA:signature_id}\|%{DATA:name}\|%{NUMBER:severity}\|%{GREEDYDATA:cef_extension}"
      ]
    }
  }

  # Extract relevant fields from CEF extensions
  kv {
    source => "cef_extension"
    field_split => " "
    value_split => "="
    target => "cef_data"
    include_brackets => true
  }

  # Convert request URL to URI
  mutate {
    gsub => [
      # Replace sourceServiceName portion in the request to keep only URI and query parameters
      "[cef_data][request]", "^%{[cef_data][sourceServiceName]}", ""
    ]
  }

  # Map CEF fields to eBPF trace format
  # resource - source, service_name & levo_env are populated in filebeat
  mutate {
    add_field => {
      "[http_scheme]" => "%{[cef_data][app]}"
      "[request][headers][:authority]" => "%{[cef_data][sourceServiceName]}"
      "[request][headers][:method]" => "%{[cef_data][requestMethod]}"
      "[request][headers][:path]" => "%{[cef_data][request]}"
      "[request][headers][user-agent]" => "%{[cef_data][requestClientApplication]}"
      "[request][body]" => ""
      "[request][truncated]" => "False"
      "[response][headers][:status]" => "%{[cef_data][cn1]}"
      "[response][body]" => ""
      "[response][truncated]" => "False"
      "[resource][host_name]" => "%{[cef_data][sourceServiceName]}"
      "[resource][telemetry_sdk_language]" => "ebpf"
      "[resource][telemetry_sdk_name]" => "logstash"
      "[resource][telemetry_sdk_version]" => "0.1.0"
      "[duration_ns]" => "%{[cef_data][duration]}"
      "[trace_id]" => "%{[cef_data][cs4]}"
      "[span_kind]" => "SERVER"
      "[local_net][ip]" => "%{[cef_data][sip]}"
      "[local_net][port]" => "%{[cef_data][spt]}"
      "[remote][ip]" => "%{[cef_data][dst]}"
      "[remote][port]" => "%{[cef_data][dpt]}"
    }
  }

  # Add query string to request URI if present
  if [cef_data][qstr] {
    mutate {
      gsub => ["[cef_data][qstr]", "\\=", "="]
    }
    mutate {
      update => { "[request][headers][:path]" => "%{[request][headers][:path]}?%{[cef_data][qstr]}" }
    }
  }

  # Add additional headers to request and response if present
  if [cef_data][additionalReqHeaders] {
    mutate {
      gsub => ["[cef_data][additionalReqHeaders]", "\\=", "="]
    }
    mutate {
      add_field => {
        "[request][additional_headers]" => "[%{[cef_data][additionalReqHeaders]}]"
      }
    }
  }

  if [cef_data][additionalResHeaders] {
    mutate {
      gsub => ["[cef_data][additionalResHeaders]", "\\=", "="]
    }
    mutate {
      add_field => {
        "[response][additional_headers]" => "[%{[cef_data][additionalResHeaders]}]"
      }
    }
  }

  # Add post body to request if present
  if [cef_data][postbody] {
    mutate {
      gsub => ["[cef_data][postbody]", "\\=", "="]
    }
    mutate {
      replace => {
        "[request][body]" => "%{[cef_data][postbody]}"
      }
    }
  }

  # Convert milliseconds to nanoseconds
  ruby {
    code => "
      if event.get('[cef_data][start]')
        # Convert milliseconds to nanoseconds
        request_time_ns = event.get('[cef_data][start]').to_i * 10**6
        event.set('[request_time_ns]', request_time_ns)
      end
    "
  }

  # Convert fields to integer/numeric where applicable
  mutate {
    convert => {
      "[request][truncated]" => "boolean"
      "[response][headers][:status]" => "integer"
      "[response][truncated]" => "boolean"
      "[duration_ns]" => "integer"
      "[request_time_ns]" => "integer"
      "[local_net][port]" => "integer"
      "[remote_net][port]" => "integer"
    }
  }

  # Remove unnecessary fields
  prune {
    whitelist_names => [
      "^http_scheme",
      "^request",
      "^response",
      "^resource",
      "^duration_ns",
      "^request_time_ns",
      "^trace_id",
      "^span_kind",
      "^local_net",
      "^remote_net"
    ]
  }

}

output {
  http {
    http_method => "post"
    url => "${LEVO_SATELLITE_URL}/1.0/ebpf/traces"
    format => "json_batch"
    headers => {
      "Content-Type" => "application/json"
      "x-levo-organization-id" => "${LEVOAI_ORG_ID}"
    }
  }
}
